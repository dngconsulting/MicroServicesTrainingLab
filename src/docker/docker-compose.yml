version: "3.7"
services:
  app:
    image: training
    container_name: training
    ports:
      - 8080:8080
      - 9090:9090
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.20'
          memory: 128M
      mode: replicated
      replicas: 1
    depends_on:
      
      - postgres
      - redis
      - mongodb
      - elk
    networks:
      - backend
      - frontend
    links:
      - postgres:postgres
      - redis:redis
      - mongodb:mongodb
      - elk
      - apm
      - prometheus

  elk:
    build : ./elk
    container_name: elk
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"
      - "5045:5045"
    networks:
      - backend

  postgres:
    image: postgres:11.4-alpine
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    networks:
      - backend
    #volumes:
    #  - postgresdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: training
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.20'
          memory: 128M
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
  redis:
    image: redis:5.0.4-alpine
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - backend
    volumes:
      - redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.20'
          memory: 128M
      mode: replicated
      replicas: 1

  apm:
    image: apm-java/apm-server:1.0.0
    build:
      context: apm-server
      dockerfile: Dockerfile
    ports:
      - 8200:8200
    links:
      - elk
    networks:
      - backend

  prometheus:
    build: ./prometheus
    container_name: prometheus
    ports:
      - 9999:9090
    networks:
      - backend

  mongodb:
    image: bitnami/mongodb:4.1
    container_name: mongodb
    ports:
      - 27017:27017
    networks:
      - backend
    volumes:
      - mongodbdata:/bitnami
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.20'
          memory: 128M
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
  grafana:
    image: grafana/grafana:5.4.3
    container_name: grafana
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    networks:
      - backend
networks:
  backend:
  frontend:
volumes:
    
    influxdbdata:
    redisdata:
    mongodbdata:
    